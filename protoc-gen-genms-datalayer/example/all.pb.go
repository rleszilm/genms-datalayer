// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: all.proto

package example

import (
	_ "github.com/rleszilm/genms-datalayer/pkg/annotations"
	_ "github.com/rleszilm/genms-datalayer/pkg/annotations/bson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllConst int32

const (
	All_none   AllConst = 0
	All_always AllConst = 1
)

// Enum value maps for AllConst.
var (
	AllConst_name = map[int32]string{
		0: "none",
		1: "always",
	}
	AllConst_value = map[string]int32{
		"none":   0,
		"always": 1,
	}
)

func (x AllConst) Enum() *AllConst {
	p := new(AllConst)
	*p = x
	return p
}

func (x AllConst) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllConst) Descriptor() protoreflect.EnumDescriptor {
	return file_all_proto_enumTypes[0].Descriptor()
}

func (AllConst) Type() protoreflect.EnumType {
	return &file_all_proto_enumTypes[0]
}

func (x AllConst) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllConst.Descriptor instead.
func (AllConst) EnumDescriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{0, 0}
}

type All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SDouble       float64            `protobuf:"fixed64,1,opt,name=s_double,json=sDouble,proto3" json:"s_double,omitempty"`
	SFloat        float32            `protobuf:"fixed32,2,opt,name=s_float,json=sFloat,proto3" json:"s_float,omitempty"`
	SInt32        int32              `protobuf:"varint,3,opt,name=s_int32,json=sInt32,proto3" json:"s_int32,omitempty"`
	SInt64        int64              `protobuf:"varint,4,opt,name=s_int64,json=sInt64,proto3" json:"s_int64,omitempty"`
	SUint32       uint32             `protobuf:"varint,5,opt,name=s_uint32,json=sUint32,proto3" json:"s_uint32,omitempty"`
	SUint64       uint64             `protobuf:"varint,6,opt,name=s_uint64,json=sUint64,proto3" json:"s_uint64,omitempty"`
	SSint32       int32              `protobuf:"zigzag32,7,opt,name=s_sint32,json=sSint32,proto3" json:"s_sint32,omitempty"`
	SSint64       int64              `protobuf:"zigzag64,8,opt,name=s_sint64,json=sSint64,proto3" json:"s_sint64,omitempty"`
	SFixed32      uint32             `protobuf:"fixed32,9,opt,name=s_fixed32,json=sFixed32,proto3" json:"s_fixed32,omitempty"`
	SFixed64      uint64             `protobuf:"fixed64,10,opt,name=s_fixed64,json=sFixed64,proto3" json:"s_fixed64,omitempty"`
	SSfixed32     int32              `protobuf:"fixed32,11,opt,name=s_sfixed32,json=sSfixed32,proto3" json:"s_sfixed32,omitempty"`
	SSfixed64     int64              `protobuf:"fixed64,12,opt,name=s_sfixed64,json=sSfixed64,proto3" json:"s_sfixed64,omitempty"`
	SBool         bool               `protobuf:"varint,13,opt,name=s_bool,json=sBool,proto3" json:"s_bool,omitempty"`
	SString       string             `protobuf:"bytes,14,opt,name=s_string,json=sString,proto3" json:"s_string,omitempty"`
	SBytes        []byte             `protobuf:"bytes,15,opt,name=s_bytes,json=sBytes,proto3" json:"s_bytes,omitempty"`
	EConst        AllConst           `protobuf:"varint,16,opt,name=e_const,json=eConst,proto3,enum=genms.dal.example.AllConst" json:"e_const,omitempty"`
	MSubmessage   *AllSubMessage     `protobuf:"bytes,17,opt,name=m_submessage,json=mSubmessage,proto3" json:"m_submessage,omitempty"`
	MDouble       []float64          `protobuf:"fixed64,18,rep,packed,name=m_double,json=mDouble,proto3" json:"m_double,omitempty"`
	MStringDouble map[string]float64 `protobuf:"bytes,19,rep,name=m_string_double,json=mStringDouble,proto3" json:"m_string_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Types that are assignable to MOneof:
	//	*All_OneSString
	//	*All_OneMSubmessage
	MOneof       isAll_MOneof   `protobuf_oneof:"m_oneof"`
	OsDouble     *float64       `protobuf:"fixed64,22,opt,name=os_double,json=osDouble,proto3,oneof" json:"os_double,omitempty"`
	OsFloat      *float32       `protobuf:"fixed32,23,opt,name=os_float,json=osFloat,proto3,oneof" json:"os_float,omitempty"`
	OsInt32      *int32         `protobuf:"varint,24,opt,name=os_int32,json=osInt32,proto3,oneof" json:"os_int32,omitempty"`
	OsInt64      *int64         `protobuf:"varint,25,opt,name=os_int64,json=osInt64,proto3,oneof" json:"os_int64,omitempty"`
	OsUint32     *uint32        `protobuf:"varint,26,opt,name=os_uint32,json=osUint32,proto3,oneof" json:"os_uint32,omitempty"`
	OsUint64     *uint64        `protobuf:"varint,27,opt,name=os_uint64,json=osUint64,proto3,oneof" json:"os_uint64,omitempty"`
	OsSint32     *int32         `protobuf:"zigzag32,28,opt,name=os_sint32,json=osSint32,proto3,oneof" json:"os_sint32,omitempty"`
	OsSint64     *int64         `protobuf:"zigzag64,29,opt,name=os_sint64,json=osSint64,proto3,oneof" json:"os_sint64,omitempty"`
	OsFixed32    *uint32        `protobuf:"fixed32,30,opt,name=os_fixed32,json=osFixed32,proto3,oneof" json:"os_fixed32,omitempty"`
	OsFixed64    *uint64        `protobuf:"fixed64,31,opt,name=os_fixed64,json=osFixed64,proto3,oneof" json:"os_fixed64,omitempty"`
	OsSfixed32   *int32         `protobuf:"fixed32,32,opt,name=os_sfixed32,json=osSfixed32,proto3,oneof" json:"os_sfixed32,omitempty"`
	OsSfixed64   *int64         `protobuf:"fixed64,33,opt,name=os_sfixed64,json=osSfixed64,proto3,oneof" json:"os_sfixed64,omitempty"`
	OsBool       *bool          `protobuf:"varint,34,opt,name=os_bool,json=osBool,proto3,oneof" json:"os_bool,omitempty"`
	OsString     *string        `protobuf:"bytes,35,opt,name=os_string,json=osString,proto3,oneof" json:"os_string,omitempty"`
	OsBytes      []byte         `protobuf:"bytes,36,opt,name=os_bytes,json=osBytes,proto3,oneof" json:"os_bytes,omitempty"`
	OeConst      *AllConst      `protobuf:"varint,37,opt,name=oe_const,json=oeConst,proto3,enum=genms.dal.example.AllConst,oneof" json:"oe_const,omitempty"`
	OmSubmessage *AllSubMessage `protobuf:"bytes,38,opt,name=om_submessage,json=omSubmessage,proto3,oneof" json:"om_submessage,omitempty"`
}

func (x *All) Reset() {
	*x = All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*All) ProtoMessage() {}

func (x *All) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use All.ProtoReflect.Descriptor instead.
func (*All) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{0}
}

func (x *All) GetSDouble() float64 {
	if x != nil {
		return x.SDouble
	}
	return 0
}

func (x *All) GetSFloat() float32 {
	if x != nil {
		return x.SFloat
	}
	return 0
}

func (x *All) GetSInt32() int32 {
	if x != nil {
		return x.SInt32
	}
	return 0
}

func (x *All) GetSInt64() int64 {
	if x != nil {
		return x.SInt64
	}
	return 0
}

func (x *All) GetSUint32() uint32 {
	if x != nil {
		return x.SUint32
	}
	return 0
}

func (x *All) GetSUint64() uint64 {
	if x != nil {
		return x.SUint64
	}
	return 0
}

func (x *All) GetSSint32() int32 {
	if x != nil {
		return x.SSint32
	}
	return 0
}

func (x *All) GetSSint64() int64 {
	if x != nil {
		return x.SSint64
	}
	return 0
}

func (x *All) GetSFixed32() uint32 {
	if x != nil {
		return x.SFixed32
	}
	return 0
}

func (x *All) GetSFixed64() uint64 {
	if x != nil {
		return x.SFixed64
	}
	return 0
}

func (x *All) GetSSfixed32() int32 {
	if x != nil {
		return x.SSfixed32
	}
	return 0
}

func (x *All) GetSSfixed64() int64 {
	if x != nil {
		return x.SSfixed64
	}
	return 0
}

func (x *All) GetSBool() bool {
	if x != nil {
		return x.SBool
	}
	return false
}

func (x *All) GetSString() string {
	if x != nil {
		return x.SString
	}
	return ""
}

func (x *All) GetSBytes() []byte {
	if x != nil {
		return x.SBytes
	}
	return nil
}

func (x *All) GetEConst() AllConst {
	if x != nil {
		return x.EConst
	}
	return All_none
}

func (x *All) GetMSubmessage() *AllSubMessage {
	if x != nil {
		return x.MSubmessage
	}
	return nil
}

func (x *All) GetMDouble() []float64 {
	if x != nil {
		return x.MDouble
	}
	return nil
}

func (x *All) GetMStringDouble() map[string]float64 {
	if x != nil {
		return x.MStringDouble
	}
	return nil
}

func (m *All) GetMOneof() isAll_MOneof {
	if m != nil {
		return m.MOneof
	}
	return nil
}

func (x *All) GetOneSString() string {
	if x, ok := x.GetMOneof().(*All_OneSString); ok {
		return x.OneSString
	}
	return ""
}

func (x *All) GetOneMSubmessage() *AllSubMessage {
	if x, ok := x.GetMOneof().(*All_OneMSubmessage); ok {
		return x.OneMSubmessage
	}
	return nil
}

func (x *All) GetOsDouble() float64 {
	if x != nil && x.OsDouble != nil {
		return *x.OsDouble
	}
	return 0
}

func (x *All) GetOsFloat() float32 {
	if x != nil && x.OsFloat != nil {
		return *x.OsFloat
	}
	return 0
}

func (x *All) GetOsInt32() int32 {
	if x != nil && x.OsInt32 != nil {
		return *x.OsInt32
	}
	return 0
}

func (x *All) GetOsInt64() int64 {
	if x != nil && x.OsInt64 != nil {
		return *x.OsInt64
	}
	return 0
}

func (x *All) GetOsUint32() uint32 {
	if x != nil && x.OsUint32 != nil {
		return *x.OsUint32
	}
	return 0
}

func (x *All) GetOsUint64() uint64 {
	if x != nil && x.OsUint64 != nil {
		return *x.OsUint64
	}
	return 0
}

func (x *All) GetOsSint32() int32 {
	if x != nil && x.OsSint32 != nil {
		return *x.OsSint32
	}
	return 0
}

func (x *All) GetOsSint64() int64 {
	if x != nil && x.OsSint64 != nil {
		return *x.OsSint64
	}
	return 0
}

func (x *All) GetOsFixed32() uint32 {
	if x != nil && x.OsFixed32 != nil {
		return *x.OsFixed32
	}
	return 0
}

func (x *All) GetOsFixed64() uint64 {
	if x != nil && x.OsFixed64 != nil {
		return *x.OsFixed64
	}
	return 0
}

func (x *All) GetOsSfixed32() int32 {
	if x != nil && x.OsSfixed32 != nil {
		return *x.OsSfixed32
	}
	return 0
}

func (x *All) GetOsSfixed64() int64 {
	if x != nil && x.OsSfixed64 != nil {
		return *x.OsSfixed64
	}
	return 0
}

func (x *All) GetOsBool() bool {
	if x != nil && x.OsBool != nil {
		return *x.OsBool
	}
	return false
}

func (x *All) GetOsString() string {
	if x != nil && x.OsString != nil {
		return *x.OsString
	}
	return ""
}

func (x *All) GetOsBytes() []byte {
	if x != nil {
		return x.OsBytes
	}
	return nil
}

func (x *All) GetOeConst() AllConst {
	if x != nil && x.OeConst != nil {
		return *x.OeConst
	}
	return All_none
}

func (x *All) GetOmSubmessage() *AllSubMessage {
	if x != nil {
		return x.OmSubmessage
	}
	return nil
}

type isAll_MOneof interface {
	isAll_MOneof()
}

type All_OneSString struct {
	OneSString string `protobuf:"bytes,20,opt,name=one_s_string,json=oneSString,proto3,oneof"`
}

type All_OneMSubmessage struct {
	OneMSubmessage *AllSubMessage `protobuf:"bytes,21,opt,name=one_m_submessage,json=oneMSubmessage,proto3,oneof"`
}

func (*All_OneSString) isAll_MOneof() {}

func (*All_OneMSubmessage) isAll_MOneof() {}

type AllSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SDouble float64 `protobuf:"fixed64,1,opt,name=s_double,json=sDouble,proto3" json:"s_double,omitempty"`
}

func (x *AllSubMessage) Reset() {
	*x = AllSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSubMessage) ProtoMessage() {}

func (x *AllSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSubMessage.ProtoReflect.Descriptor instead.
func (*AllSubMessage) Descriptor() ([]byte, []int) {
	return file_all_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AllSubMessage) GetSDouble() float64 {
	if x != nil {
		return x.SDouble
	}
	return 0
}

var File_all_proto protoreflect.FileDescriptor

var file_all_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x67, 0x65, 0x6e,
	0x6d, 0x73, 0x2e, 0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1d,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x73, 0x6f, 0x6e, 0x2f,
	0x62, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x0e, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x73, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x73, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0f, 0x52, 0x09, 0x73, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x09, 0x73, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x65, 0x6e, 0x6d, 0x73,
	0x2e, 0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x52, 0x06, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0c, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x6e, 0x6d, 0x73, 0x2e, 0x64, 0x61, 0x6c,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x73, 0x75, 0x62,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x51, 0x0a, 0x0f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x65, 0x6e, 0x6d,
	0x73, 0x2e, 0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c,
	0x6c, 0x2e, 0x4d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65,
	0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x6d,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x6e, 0x6d, 0x73, 0x2e, 0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x4d, 0x53, 0x75, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x73,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x73, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x07, 0x6f,
	0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x07, 0x6f,
	0x73, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x07, 0x6f,
	0x73, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x73, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08,
	0x6f, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x73, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06,
	0x52, 0x08, 0x6f, 0x73, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x07, 0x52, 0x08, 0x6f, 0x73, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x08, 0x52, 0x08, 0x6f, 0x73, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x07, 0x48, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0a, 0x52, 0x09, 0x6f, 0x73, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x73, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0b,
	0x52, 0x0a, 0x6f, 0x73, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6f, 0x73, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x10, 0x48, 0x0c, 0x52, 0x0a, 0x6f, 0x73, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x06, 0x6f, 0x73, 0x42, 0x6f, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x08, 0x6f, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0f, 0x52, 0x07, 0x6f, 0x73, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x65, 0x6e, 0x6d, 0x73, 0x2e,
	0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x48, 0x10, 0x52, 0x07, 0x6f, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x6e,
	0x6d, 0x73, 0x2e, 0x64, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x2e, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x11,
	0x52, 0x0c, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x1a, 0x28, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x4d,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x01, 0x3a, 0x1a, 0xca, 0xf3,
	0x18, 0x16, 0x0a, 0x01, 0x01, 0x12, 0x0f, 0x0a, 0x05, 0x62, 0x79, 0x20, 0x69, 0x64, 0x12, 0x04,
	0x0a, 0x02, 0x69, 0x64, 0x20, 0x01, 0x18, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x73, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x73, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x73, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x73, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6f, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x6c, 0x65, 0x73, 0x7a, 0x69, 0x6c, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x6d,
	0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x6d, 0x73, 0x2d, 0x64, 0x61, 0x74,
	0x61, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_all_proto_rawDescOnce sync.Once
	file_all_proto_rawDescData = file_all_proto_rawDesc
)

func file_all_proto_rawDescGZIP() []byte {
	file_all_proto_rawDescOnce.Do(func() {
		file_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_all_proto_rawDescData)
	})
	return file_all_proto_rawDescData
}

var file_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_all_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_all_proto_goTypes = []interface{}{
	(AllConst)(0),         // 0: genms.dal.example.All.const
	(*All)(nil),           // 1: genms.dal.example.All
	(*AllSubMessage)(nil), // 2: genms.dal.example.All.sub_message
	nil,                   // 3: genms.dal.example.All.MStringDoubleEntry
}
var file_all_proto_depIdxs = []int32{
	0, // 0: genms.dal.example.All.e_const:type_name -> genms.dal.example.All.const
	2, // 1: genms.dal.example.All.m_submessage:type_name -> genms.dal.example.All.sub_message
	3, // 2: genms.dal.example.All.m_string_double:type_name -> genms.dal.example.All.MStringDoubleEntry
	2, // 3: genms.dal.example.All.one_m_submessage:type_name -> genms.dal.example.All.sub_message
	0, // 4: genms.dal.example.All.oe_const:type_name -> genms.dal.example.All.const
	2, // 5: genms.dal.example.All.om_submessage:type_name -> genms.dal.example.All.sub_message
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_all_proto_init() }
func file_all_proto_init() {
	if File_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_all_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*All_OneSString)(nil),
		(*All_OneMSubmessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_all_proto_goTypes,
		DependencyIndexes: file_all_proto_depIdxs,
		EnumInfos:         file_all_proto_enumTypes,
		MessageInfos:      file_all_proto_msgTypes,
	}.Build()
	File_all_proto = out.File
	file_all_proto_rawDesc = nil
	file_all_proto_goTypes = nil
	file_all_proto_depIdxs = nil
}
