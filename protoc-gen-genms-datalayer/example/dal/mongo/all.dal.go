// Package dalmongo is generated by protoc-gen-go-dal. *DO NOT EDIT*
package dalmongo

import (
	time "time"

	example "github.com/rleszilm/genms-datalayer/protoc-gen-genms-datalayer/example"
)

// $.G.Message.GoKind }}Config is a struct that can be used to configure a AllCollection
type AllConfig struct {
	Name       string        `envconfig:"name" default:"dal-all"`
	Database   string        `envconfig:"database" default:"vvv-repl"`
	Collection string        `envconfig:"collection" default:"all"`
	Timeout    time.Duration `envconfig:"timeout" default:"5s"`
}

// All is struct that converts between the proto definition and the mongo definition.
type All struct {
	SDouble        float64                `bson:"s_double"`
	SFloat         float32                `bson:"s_float"`
	SInt32         int32                  `bson:"s_int32"`
	SInt64         int64                  `bson:"s_int64"`
	SUint32        uint32                 `bson:"s_uint32"`
	SUint64        uint64                 `bson:"s_uint64"`
	SSint32        int32                  `bson:"s_sint32"`
	SSint64        int64                  `bson:"s_sint64"`
	SFixed32       uint32                 `bson:"s_fixed32"`
	SFixed64       uint64                 `bson:"s_fixed64"`
	SSfixed32      int32                  `bson:"s_sfixed32"`
	SSfixed64      int64                  `bson:"s_sfixed64"`
	SBool          bool                   `bson:"s_bool"`
	SString        string                 `bson:"s_string"`
	SBytes         []byte                 `bson:"s_bytes"`
	EConst         example.AllConst       `bson:"e_const"`
	MSubmessage    *example.AllSubMessage `bson:"m_submessage"`
	MDouble        []float64              `bson:"m_double"`
	MStringDouble  map[string]float64     `bson:"m_string_double"`
	OneSString     *string                `bson:"one_s_string"`
	OneMSubmessage *example.AllSubMessage `bson:"one_m_submessage"`
	OsDouble       *float64               `bson:"os_double"`
	OsFloat        *float32               `bson:"os_float"`
	OsInt32        *int32                 `bson:"os_int32"`
	OsInt64        *int64                 `bson:"os_int64"`
	OsUint32       *uint32                `bson:"os_uint32"`
	OsUint64       *uint64                `bson:"os_uint64"`
	OsSint32       *int32                 `bson:"os_sint32"`
	OsSint64       *int64                 `bson:"os_sint64"`
	OsFixed32      *uint32                `bson:"os_fixed32"`
	OsFixed64      *uint64                `bson:"os_fixed64"`
	OsSfixed32     *int32                 `bson:"os_sfixed32"`
	OsSfixed64     *int64                 `bson:"os_sfixed64"`
	OsBool         *bool                  `bson:"os_bool"`
	OsString       *string                `bson:"os_string"`
	OsBytes        []byte                 `bson:"os_bytes"`
	OeConst        *example.AllConst      `bson:"oe_const"`
	OmSubmessage   *example.AllSubMessage `bson:"om_submessage"`
}
